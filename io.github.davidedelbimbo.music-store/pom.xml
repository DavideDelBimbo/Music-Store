<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.davidedelbimbo</groupId>
  <artifactId>music-store</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <properties>
    <!-- Java version -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>

    <!-- Dependencies versions -->
    <junit.version>4.13.2</junit.version>
    <assertj.swing.version>3.17.1</assertj.swing.version>
    <mockito.version>4.4.0</mockito.version>
    <cucumber.version>7.17.0</cucumber.version>
    <mongodb.version>3.12.14</mongodb.version>
    <logback.version>1.2.8</logback.version>
    <picocli.version>4.7.5</picocli.version>

    <!-- Plugins versions -->
    <jacoco.version>0.8.12</jacoco.version>
    <coveralls.version>4.3.0</coveralls.version>
    <jaxb.version>2.3.1</jaxb.version>
    <pitest.version>1.16.0</pitest.version>
    <sonar.version>3.11.0.3922</sonar.version>
    <build.helper.version>3.5.0</build.helper.version>
    <failsafe.version>2.22.2</failsafe.version>

    <!-- Docker properties -->
    <docker.image.mongodb>mongo:6.0.14</docker.image.mongodb>

    <!-- Build properties -->
    <skipUT>false</skipUT>
    <skipIT>false</skipIT>
    <skipBDD>false</skipBDD>

    <!-- SonarCloud properties -->
    <sonar.coverage.exclusions>
      **/model/*.*,
      **/app/**/*.*
    </sonar.coverage.exclusions>
    <sonar.junit.reportPaths>
      ${project.build.directory}/surefire-reports,
      ${project.build.directory}/failsafe-reports
    </sonar.junit.reportPaths>
    <!-- Disable SonarCloud rules for specific files -->
    <sonar.issue.ignore.multicriteria>e1, e2</sonar.issue.ignore.multicriteria>
    <!-- Disable rule for "Rename this local variable to match the regular expression '^[a-z][a-zA-Z0-9]*$'."-->
    <sonar.issue.ignore.multicriteria.e1.ruleKey>
      java:S117
    </sonar.issue.ignore.multicriteria.e1.ruleKey>
    <sonar.issue.ignore.multicriteria.e1.resourceKey>
      **/swing/*
    </sonar.issue.ignore.multicriteria.e1.resourceKey>
    <!-- Disable rule for "Tests should include assertions" (SonarQube is not aware of AssertJ Swing) -->
    <sonar.issue.ignore.multicriteria.e2.ruleKey>
      java:S2699
    </sonar.issue.ignore.multicriteria.e2.ruleKey>
    <sonar.issue.ignore.multicriteria.e2.resourceKey>
      **/swing/*Test*,
      **/swing/*IT*
    </sonar.issue.ignore.multicriteria.e2.resourceKey>
  </properties>

  <dependencies>
    <!-- Testing dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-swing-junit</artifactId>
      <version>${assertj.swing.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-java</artifactId>
      <version>${cucumber.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-junit</artifactId>
      <version>${cucumber.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Application dependencies -->
    <dependency>
      <groupId>org.mongodb</groupId>
      <artifactId>mongo-java-driver</artifactId>
      <version>${mongodb.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
      <version>${picocli.version}</version>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <!-- Lock down plugins versions to avoid using Maven defaults -->
      <plugins>
        <!-- Clean lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>

        <!-- Default lifecycle -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.2</version>
          <configuration>
            <!-- Skip Unit Tests when -DskipUT=true is passed -->
            <skipTests>${skipUT}</skipTests>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-report-plugin</artifactId>
          <version>2.22.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- JaCoCo plugin for Code Coverage report -->
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco.version}</version>
          <executions>
            <execution>
              <goals>
                <!-- Binds by default to the phase "initialize" -->
                <goal>prepare-agent</goal>
                <!-- Binds by default to the phase "verify" -->
                <goal>report</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <excludes>
              <!-- Exclude source classes from Code Coverage analysis -->
              <exclude>**/model/*.*</exclude>
              <exclude>**/app/**/*.*</exclude>
            </excludes>
          </configuration>
        </plugin>
        <!-- Coveralls plugin for Code Coverage publishing -->
        <plugin>
          <groupId>org.eluder.coveralls</groupId>
          <artifactId>coveralls-maven-plugin</artifactId>
          <version>${coveralls.version}</version>
          <dependencies>
            <!-- Required when using JDK 9 or higher (since javax.xml.bind has been removed from the JDK) -->
            <dependency>
              <groupId>javax.xml.bind</groupId>
              <artifactId>jaxb-api</artifactId>
              <version>${jaxb.version}</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <phase>verify</phase>
              <goals>
                <goal>report</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- Pitest plugin for Mutation Testing report -->
        <plugin>
          <groupId>org.pitest</groupId>
          <artifactId>pitest-maven</artifactId>
          <version>${pitest.version}</version>
          <executions>
            <execution>
              <phase>verify</phase>
              <goals>
                <!-- Binds by default to the phase "test" -->
                <goal>mutationCoverage</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <!-- Target source classes for Mutation Testing analysis -->
            <targetClasses>
              <param>${project.groupId}.music_store.controller.*</param>
            </targetClasses>
            <!-- Target test clases for Mutation Testing analysis -->
            <targetTests>
              <param>${project.groupId}.music_store.controller.*</param>
            </targetTests>
            <!-- Mutators types for Mutation Testing analysis -->
            <mutators>
              <mutator>STRONGER</mutator>
            </mutators>
            <!-- Threshold to consider Mutation Testing analysis passed -->
            <mutationThreshold>100</mutationThreshold>
          </configuration>
        </plugin>
        <!-- SonarCloud plugin for Code Quality analysis -->
        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>${sonar.version}</version>
        </plugin>

        <!-- Site lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- Build Helper plugin to add test sources and resources -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${build.helper.version}</version>
        <executions>
          <execution>
            <id>add-test-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <!-- Add test sources paths -->
              <sources>
                <source>src/it/java</source>
                <source>src/bdd/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-test-resource</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>add-test-resource</goal>
            </goals>
            <configuration>
              <!-- Add test resources paths -->
              <resources>
                <resource>
                  <directory>src/it/resources</directory>
                </resource>
                <resource>
                  <directory>src/bdd/resources</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- FailSafe plugin to run Integration Tests and BDD Tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${failsafe.version}</version>
        <executions>
          <execution>
            <id>it-tests</id>
            <goals>
              <!-- Binds by default to the phase "integration-test" -->
              <goal>integration-test</goal>
              <!-- Binds by default to the phase "verify" -->
              <goal>verify</goal>
            </goals>
            <configuration>
              <!-- Skip Integration Tests when -DskipIT=true is passed -->
              <skipTests>${skipIT}</skipTests>
            </configuration>
          </execution>
          <execution>
            <id>bdd-tests</id>
            <goals>
              <!-- Binds by default to the phase "integration-test" -->
              <goal>integration-test</goal>
              <!-- Binds by default to the phase "verify" -->
              <goal>verify</goal>
            </goals>
            <configuration>
              <!-- Skip BDD Tests when -DskipBDD=true is passed -->
              <skipTests>${skipBDD}</skipTests>
              <!-- Exclude Integration Tests classes from BDD Tests -->
              <excludes>
                <exclude>**/*IT.java</exclude>
              </excludes>
              <!-- Include BDD Tests classes -->
              <includes>
                <include>**/*BDD.java</include>	
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!-- JaCoCo profile to enable Code Coverage (when -Pjacoco is passed) -->
    <profile>
      <id>jacoco</id>
      <build>
        <plugins>
          <plugin>
            <!-- Configured in pluginManagement -->
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- Coveralls profile to enable Code Coverage publishing (when -Pcoveralls is passed) -->
    <profile>
      <id>coveralls</id>
      <build>
        <plugins>
          <!-- JaCoCo report is required by Coveralls Maven plugin -->
          <plugin>
            <!-- Configured in pluginManagement -->
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
          </plugin>
          <plugin>
            <!-- Configured in pluginManagement -->
            <groupId>org.eluder.coveralls</groupId>
            <artifactId>coveralls-maven-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- Pitest profile to enable Mutation Testing (when -Ppitest is passed) -->
    <profile>
      <id>pitest</id>
      <build>
        <plugins>
          <plugin>
            <!-- Configured in pluginManagement -->
            <groupId>org.pitest</groupId>
            <artifactId>pitest-maven</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>